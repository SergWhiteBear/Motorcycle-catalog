from fastapi import FastAPI, Request, Dependsfrom fastapi.responses import HTMLResponsefrom fastapi.staticfiles import StaticFilesfrom fastapi.templating import Jinja2Templatesfrom fastapi.middleware.cors import CORSMiddlewarefrom sqlalchemy.ext.asyncio import AsyncSessionfrom src.database import get_async_sessionfrom src.moto.router import get_motofrom src.moto.router import router as moto_routerapp = FastAPI(    title="BuyMoto",)# Подключение статических файловapp.mount("/static", StaticFiles(directory="static"), name="static")app.mount('/js', StaticFiles(directory='js'), name='js')# Шаблоны (HTML файлы)templates = Jinja2Templates(directory="templates")app.add_middleware(    CORSMiddleware,    allow_origins=["*"],  # Разрешить все источники, можно заменить на конкретный домен    allow_credentials=True,    allow_methods=["*"],  # Разрешить все методы (GET, POST и т.д.)    allow_headers=["*"],  # Разрешить любые заголовки)@app.get("/", response_class=HTMLResponse)async def read_root(request: Request):    return templates.TemplateResponse("catalog.html", {"request": request})@app.get("/profile", response_class=HTMLResponse)async def read_profile(request: Request):    return templates.TemplateResponse("profile.html", {"request": request})@app.get("/about/{id_moto}", response_class=HTMLResponse)async def read_moto(request: Request, id_moto: int, session: AsyncSession = Depends(get_async_session)):    moto_data = await get_moto(id_moto, session)    return templates.TemplateResponse("about.html", {"request": request, "moto": moto_data["moto"]})app.include_router(moto_router)